---
- name: Set up service specific cron jobs
  cron: name={{ item.name }} job={{ item.command }} user={{ django_user }} minute={{ item.minute }} hour={{ item.hour|default("*") }} disabled={{ item.disabled|default(false) }}
  with_items: "{{ django_cronjobs }}"
  tags: cronjobs

- name: Set up service specific cron environment variables
  cron: name={{ item.name }} user={{ django_user }} env=yes value={{ item.value }}
  with_items: "{{ django_cronenvs }}"
  tags: cronjobs

# State directory (misnomer) contains both state and actions for managing
# the service (like backup config, scripts and reload touchpoint)
- name: Ensure service state directory exists
  file: path=/home/{{django_user}}/service_state state=directory owner={{ django_user }} group={{ django_user}}
  tags: code_update

- name: Ensure service logs directory exists
  file: path=/home/{{ django_user }}/service_logs state=directory owner={{ django_user }} group={{ django_user }}
  tags: code_update

- name: Write deployed version in service state directory
  copy: content="{{ git_deploy.after }}\n" dest=/home/{{ django_user }}/service_state/deployed_version
  tags: code_update
  when: not django_skip_git is defined

# Currently this always registers, need a way to not output if there is only a single line
- name: Run checks in deployment mode
  become_user: "{{django_user}}"
  environment: "{{ _django_setup_env }}"
  command: chdir=/home/{{django_user}}/{{django_name}} {{ _django_venv }}/bin/python manage.py check --deploy
  register: django_checks_status
  notify: django_checks_found_something

# Touching the file will not magically do something. Application server (like uwsgi) must be configured
# to act on this.
- name: Touch the service reload flag file
  file: path=/home/{{django_user}}/service_state/touch_to_reload state=touch owner={{django_user}} mode=0700
  tags: code_update
