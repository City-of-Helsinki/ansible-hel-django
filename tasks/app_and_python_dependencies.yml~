- name: Clone the configured version of the project source
  become_user: "{{django_user}}"
  git: repo={{django_git_url}}
       dest=/home/{{django_user}}/{{django_name}}
       version={{django_git_version}}
       force={{django_git_force_pull|default(false)}}
  tags: [ 'code_update', 'git_operations' ]
  register: git_deploy
  until: git_deploy|succeeded
  when: not django_skip_git is defined

- name: Synchoronize given directory as source
  become_user: "{{ django_user }}"
  synchronize:
    src: "{{ django_sync_source }}"
    dest: /home/{{ django_user }}/{{ django_nameÂ }}/
  when: django_sync_source is defined

- name: Create virtualenv & upgrade pip & setuptools
  become_user: "{{django_user}}"
  environment:
    LC_CTYPE: C.UTF-8
  pip:
    name: "{{item}}"
    virtualenv: /home/{{django_user}}/venv
    virtualenv_command: virtualenv
    virtualenv_python: python3
    virtualenv_site_packages: false
    state: latest
  with_items:
    - setuptools
    - pip

- name: Install requirements.txt into virtualenv
  become_user: "{{django_user}}"
  # pip processing does not read the encoding header in Python files, thus
  # causing a failure if there are non-ASCII characters in setup.py, workaround
  # this by setting locale (this should be verified as this over year ago)
  environment:
    LC_ALL: C.UTF-8
  pip: requirements=/home/{{django_user}}/{{django_name}}/requirements.txt
       virtualenv=/home/{{django_user}}/venv
       virtualenv_site_packages=no
       state={{ django_upgrade_requirements | default(False) | ternary('latest', 'present') }}
  tags: [ venv, code_update ]

# No easy way to do this without duplicating the stanza?
- name: Install requirements-dev.txt into virtualenv
  become_user: "{{django_user}}"
  environment:
    LC_ALL: C.UTF-8
  pip: requirements=/home/{{django_user}}/{{django_name}}/requirements-dev.txt
       virtualenv=/home/{{django_user}}/venv
       virtualenv_site_packages=no
       state={{ django_upgrade_requirements | default(False) | ternary('latest', 'present') }}
  tags: [ venv, code_update ]
  when: django_install_devreqs | default(False)

- name: Install configuration specific Python packages into virtualenv
  become_user: "{{django_user}}"
  # pip processing does not read the encoding header in Python files, thus
  # causing a failure if there are non-ASCII characters in setup.py, workaround
  # this by setting locale (this should be verified as this over year ago)
  environment:
    LC_ALL: C.UTF-8
  pip: name={{item}}
       virtualenv=/home/{{django_user}}/venv
       virtualenv_site_packages=no
       state=latest
  with_items: "{{django_service_pypis|default([])}}"
  tags: [ venv, code_update ]

# This is a convenience for in situ debugging
- name: Make virtualenv activate by default
  become_user: "{{django_user}}"
  lineinfile: dest=/home/{{django_user}}/.bashrc line=". ~/venv/bin/activate"
